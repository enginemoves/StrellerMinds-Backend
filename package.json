{
  "name": "strellerminds_backend",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build && cpx \"src/i18n/**/*\" dist/i18n",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:tracing": "node -r ts-node/register src/main.ts",
    "test:contract": "jest --testPathPattern=apps/backend/tests/contract/ --config jest.contract.config.js",
    "test:contract:watch": "jest --testPathPattern=apps/backend/tests/contract/ --config jest.contract.config.js --watch",
    "test:contract:coverage": "jest --testPathPattern=apps/backend/tests/contract/ --config jest.contract.config.js --coverage",
    "test:contract:provider": "jest apps/backend/tests/contract/provider-verification.test.ts --config jest.contract.config.js",
    "pact:setup": "node scripts/pact-setup.js init",
    "pact:cleanup": "node scripts/pact-setup.js cleanup",
    "pact:validate": "node scripts/pact-setup.js validate",
    "pact:publish": "pact-broker publish ./pacts --consumer-app-version=$npm_package_version --broker-base-url=$PACT_BROKER_URL --broker-token=$PACT_BROKER_TOKEN",
    "pact:verify": "pact-broker verify --provider-base-url=http://localhost:3000 --provider-app-version=$npm_package_version --broker-base-url=$PACT_BROKER_URL --broker-token=$PACT_BROKER_TOKEN",
    "pact:can-i-deploy": "pact-broker can-i-deploy --pacticipant StrellerMinds-Backend --version $npm_package_version --to-environment production --broker-base-url=$PACT_BROKER_URL --broker-token=$PACT_BROKER_TOKEN",
    "pact:consumer": "./scripts/pact-ci-integration.sh consumer",
    "pact:provider": "./scripts/pact-ci-integration.sh provider",
    "pact:verify-deployment": "./scripts/pact-ci-integration.sh verify",
    "pact:full": "./scripts/pact-ci-integration.sh full",
    "pact:test-pipeline": "node scripts/test-contract-pipeline.js",
    "start:dev": "set NODE_ENV=development && nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "test:unit": "jest --testPathPattern=src/.*\\.spec\\.ts$",
    "test:integration": "node scripts/run-integration-tests.js all",
    "test:integration:user-registration": "node scripts/run-integration-tests.js user-registration",
    "test:integration:course-enrollment": "node scripts/run-integration-tests.js course-enrollment",
    "test:integration:certificate-generation": "node scripts/run-integration-tests.js certificate-generation",
    "test:integration:payment-processing": "node scripts/run-integration-tests.js payment-processing",
    "test:integration:blockchain-interaction": "node scripts/run-integration-tests.js blockchain-interaction",
    "test:integration:auth": "node scripts/run-integration-tests.js auth",
    "test:cypress": "cypress run",
    "test:cypress:open": "cypress open",
    "test:cypress:ci": "start-server-and-test start:dev http://localhost:3000 test:cypress",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e && npm run test:cypress:ci",
    "test:coverage:unit": "jest --coverage --testPathPattern=src/.*\\.spec\\.ts$",
    "test:coverage:integration": "jest --coverage --testPathPattern=test/integration/.*\\.spec\\.ts$",
    "test:coverage:merge": "nyc merge coverage coverage/merged.json && nyc report --reporter=html --reporter=lcov",
    "test:report": "node scripts/test-reporter.js",
    "test:ci": "npm run test:all && npm run test:report",
    "test:mutation": "stryker run",
    "test:visual": "cypress run --spec 'test/e2e/specs/visual/**/*.cy.ts'",
    "test:a11y": "cypress run --spec 'test/e2e/specs/accessibility/**/*.cy.ts'",
    "accessibility:audit": "node scripts/accessibility-audit.js",
    "accessibility:test": "jest --testPathPattern=accessibility",
    "accessibility:report": "npm run accessibility:audit && npm run accessibility:test",
    "generate:openapi": "nest build && node scripts/generate-openapi.js",
    "security:audit": "audit-ci --moderate --report-type summary",
    "security:snyk": "snyk test || true",
    "security:licenses": "license-checker --summary",
    "security:report": "npm run security:audit && npm run security:snyk && npm run security:licenses",
    "load:test": "artillery run test/load/artillery-config.yml",
    "load:test:quick": "artillery quick --count 10 --num 3 http://localhost:3000/health",
    "load:test:auth": "artillery run test/load/auth-load-test.yml",
    "load:test:courses": "artillery run test/load/courses-load-test.yml",
    "load:test:full": "npm run load:test:auth && npm run load:test:courses && npm run load:test",
    "perf:baseline": "node scripts/performance-baseline.js",
    "perf:monitor": "node scripts/performance-monitor.js",
    "perf:report": "node scripts/performance-report.js",
    "perf:profile": "clinic doctor -- node dist/main.js",
    "perf:flame": "clinic flame -- node dist/main.js",
    "perf:bubbleprof": "clinic bubbleprof -- node dist/main.js",
    "stress:test": "autocannon -c 100 -d 30 http://localhost:3000/health",
    "stress:test:custom": "node scripts/stress-test.js",
    "perf:demo": "node scripts/performance-demo.js",
    "db:migrate": "node scripts/db-manager.js migrate",
    "db:revert": "node scripts/db-manager.js revert",
    "db:status": "node scripts/db-manager.js status",
    "db:validate": "node scripts/db-manager.js validate",
    "db:optimize": "node scripts/db-manager.js optimize",
    "db:backup": "node scripts/db-manager.js backup",
    "db:restore": "node scripts/db-manager.js restore",
    "db:health": "node scripts/db-manager.js health",
    "db:generate": "node scripts/db-manager.js generate",
    "schema:analyze": "node scripts/schema-analysis.js",
    "docker:build": "docker build -t strellerminds-backend .",
    "docker:build:prod": "docker build --target production -t strellerminds-backend:prod .",
    "docker:run": "docker run -p 3000:3000 strellerminds-backend",
    "docker:run:prod": "docker run -p 3000:3000 strellerminds-backend:prod",
    "k8s:apply": "kubectl apply -f k8s/",
    "k8s:delete": "kubectl delete -f k8s/",
    "k8s:logs": "kubectl logs -f deployment/strellerminds-backend-staging-blue -n strellerminds-staging",
    "k8s:status": "kubectl get pods -n strellerminds-staging -l app=strellerminds-backend",
    "deploy:staging": "./scripts/blue-green-deploy.sh staging",
    "deploy:production": "./scripts/blue-green-deploy.sh production",
    "rollback:staging": "./scripts/rollback.sh staging",
    "rollback:production": "./scripts/rollback.sh production",
    "rollback:emergency": "./scripts/emergency-rollback.sh",
    "smoke:test:staging": "./scripts/smoke-tests.sh staging",
    "smoke:test:production": "./scripts/smoke-tests.sh production",
    "monitor:deployment": "./scripts/monitor-deployment.sh",
    "pipeline:monitor": "./scripts/pipeline-monitoring.sh",
    "backup:db:staging": "./scripts/backup-database.sh staging",
    "backup:db:production": "./scripts/backup-database.sh production",
    "restore:db:staging": "./scripts/restore-database.sh staging",
    "restore:db:production": "./scripts/restore-database.sh production",
    "ci:build": "npm ci && npm run lint && npm run test:coverage:unit && npm run build",
    "ci:test:full": "npm run test:coverage:unit && npm run test:coverage:integration && npm run test:e2e",
    "ci:security": "npm run security:audit && npm run security:snyk",
    "ci:performance": "npm run perf:baseline && npm run load:test:full",
    "ci:quality": "npm run lint && npm run test:coverage:merge && npm run accessibility:report",
    "ci:deploy:staging": "npm run ci:build && npm run ci:test:full && npm run deploy:staging",
    "ci:deploy:production": "npm run ci:build && npm run ci:test:full && npm run ci:security && npm run deploy:production",
    "prepare": "husky"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "^3.840.0",
    "@fastify/compress": "^8.0.1",
    "@fastify/csrf-protection": "^7.1.0",
    "@fastify/helmet": "^13.0.1",
    "@fastify/multipart": "^8.0.0",
    "@fastify/rate-limit": "^8.1.1",
    "@hapi/joi": "^17.1.1",
    "@nestjs/axios": "^4.0.0",
    "@nestjs/bull": "^11.0.2",
    "@nestjs/common": "^11.1.6",
    "@nestjs/config": "^3.0.0",
    "@nestjs/core": "^11.1.6",
    "@nestjs/cqrs": "^10.2.7",
    "@nestjs/event-emitter": "^3.0.1",
    "@nestjs/jwt": "^10.0.0",
    "@nestjs/mapped-types": "^2.1.0",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-fastify": "^11.1.3",
    "@nestjs/platform-socket.io": "^11.1.2",
    "@nestjs/schedule": "^5.0.1",
    "@nestjs/serve-static": "^5.0.3",
    "@nestjs/swagger": "^7.0.0",
    "@nestjs/terminus": "^11.0.0",
    "@nestjs/throttler": "^6.4.0",
    "@nestjs/websockets": "^11.1.0",
    "@stellar/stellar-sdk": "^13.3.0",
    "@types/pdfkit": "^0.13.9",
    "@willsoto/nestjs-prometheus": "^6.0.2",
    "bcrypt": "^5.1.1",
    "bull": "^4.16.5",
    "canvas": "^2.11.2",
    "class-transformer": "^0.5.0",
    "class-validator": "^0.14.0",
    "cloudinary": "^1.41.3",
    "fluent-ffmpeg": "^2.1.3",
    "handlebars": "^4.7.8",
    "ipfs-http-client": "^50.1.2",
    "ipfs-only-hash": "^4.0.0",
    "json2csv": "^6.0.0-alpha.2",
    "multer": "^1.4.5-lts.2",
    "multer-storage-cloudinary": "^4.0.0",
    "nest-commander": "^3.17.0",
    "nestjs-i18n": "^10.5.1",
    "node-cache": "^5.1.2",
    "nodemailer": "^6.10.0",
    "passport": "^0.7.0",
    "passport-apple": "^2.0.2",
    "passport-facebook": "^3.0.0",
    "passport-google-oauth20": "^2.0.0",
    "passport-jwt": "^4.0.1",
    "pdfkit": "^0.16.0",
    "pg": "^8.11.3",
    "qrcode": "^1.5.3",
    "rate-limiter-flexible": "^7.1.0",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.2",
    "socket.io": "^4.8.1",
    "stripe": "^14.0.0",
    "typeorm": "^0.3.0",
    "uuid": "^11.1.0",
    "zxcvbn": "^4.4.2"
  },
  "devDependencies": {
    "@aws-sdk/client-cloudfront": "^3.896.0",
    "@faker-js/faker": "^8.4.1",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.1.6",
    "@pact-foundation/pact": "^15.0.1",
    "@stryker-mutator/core": "^8.2.6",
    "@stryker-mutator/jest-runner": "^8.2.6",
    "@stryker-mutator/typescript-checker": "^8.2.6",
    "@types/bull": "^4.10.4",
    "@types/caseless": "^0.12.5",
    "@types/express": "^5.0.0",
    "@types/fluent-ffmpeg": "^2.1.27",
    "@types/jest": "^29.5.2",
    "@types/json2csv": "^5.0.7",
    "@types/long": "^4.0.2",
    "@types/luxon": "^3.6.2",
    "@types/multer": "^1.4.12",
    "@types/node": "^20.17.32",
    "@types/nodemailer": "^6.4.17",
    "@types/normalize-package-data": "^2.4.4",
    "@types/passport-apple": "^2.0.3",
    "@types/request": "^2.48.12",
    "@types/supertest": "^6.0.0",
    "@types/tough-cookie": "^4.0.5",
    "@types/uuid": "^10.0.0",
    "@types/zxcvbn": "^4.4.5",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "artillery": "^2.0.0",
    "audit-ci": "^7.1.0",
    "autocannon": "^7.15.0",
    "clinic": "^13.0.0",
    "common-password-checker": "^0.1.0",
    "cypress": "^13.6.3",
    "cypress-axe": "^1.5.0",
    "cypress-multi-reporters": "^1.6.4",
    "cypress-visual-regression": "^5.0.0",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^9.1.2",
    "eslint-plugin-prettier": "^5.5.4",
    "husky": "^9.1.7",
    "jest": "^29.5.0",
    "jest-html-reporters": "^3.1.5",
    "jest-junit": "^16.0.0",
    "k6": "^0.0.0",
    "license-checker": "^25.0.1",
    "lint-staged": "^16.2.0",
    "loadtest": "^8.0.9",
    "nyc": "^15.1.0",
    "prettier": "^3.6.2",
    "snyk": "^1.1297.3",
    "source-map-support": "^0.5.21",
    "start-server-and-test": "^2.0.3",
    "supertest": "^7.1.1",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  },
  "lint-staged": {
    "*.{ts,js,json,md}": [
      "eslint --fix",
      "prettier --write"
    ]
  }
}
